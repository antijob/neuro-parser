# Руководство по разработке

Этот документ содержит инструкции для разработчиков, в том числе управление Python-пакетами, запуск проекта локально и в продакшене, настройку Telegram-бота, рассылку сообщений и использование API.

## Оглавление
1. [Управление Python-пакетами](#управление-python-пакетами)
1. [Локальный запуск](#локальный-запуск)
1. [Запуск в продакшене](#запуск-в-продакшене)
1. [Настройка Telegram-бота](#настройка-telegram-бота)
1. [Настройка Telethon-клиента](#настройка-telethon-клиента)
1. [API моделей](#api-моделей)
1. [REST API интерфейс](#rest-api)
1. [Инфраструктура](#инфраструктура)
1. [Внесение вклада](#внесение-вклада)
1. [Контакты](#контакты)

---

## Управление Python-пакетами

Для управления Python-пакетами мы используем [PDM](https://pdm-project.org/):

```bash
# установка всех зафиксированных пакетов из файла блокировки
pdm install

# разрешение всех зависимостей и фиксация пакетов в lock-файл
pdm lock

# обновление всех пакетов
pdm update

# добавление нового пакета в pyproject.toml без создания venv
pdm add --no-sync <package_name>
```

Файлы `pyproject.toml` и `pdm.lock` должны быть включены в git.

---

## Локальный запуск

1. Создайте файл `.env` на основе `.env.template` и инициализируйте базу данных.
2. Выполните следующую команду в корневом каталоге для запуска локального контейнера:

```bash
docker-compose up -d
```

3. Добавьте следующие строки в файл `/etc/hosts` для разрешения локальных доменов Traefik:

```bash
127.0.0.1 report.local
127.0.0.1 flower-report.local
```

4. Доступ к административной панели: `http://report.local/s/ecret/admin` или используйте API: `http://report.local/api`.

5. Для начала полноценной работы системы нужно добавить ссылки на источники и типы инцидентов для отслеживания

---

## Запуск в продакшене

1. Измените файл `config/.env` и создайте базу данных.
2. Выполните следующую команду в корневом каталоге для запуска контейнера в продакшене:

```bash
docker-compose -f docker-compose.prod.yaml up -d
```

---

## Настройка Telegram-бота

Вы можете использовать Telegram-бота для получения уведомлений о новых инцидентах.

### Настройка

1. Зарегистрируйте нового бота через [BotFather](https://t.me/BotFather).
2. Добавьте следующие настройки в файл `.env`:

```bash
TELEGRAM_BOT_TOKEN=
```

- `TELEGRAM_BOT_TOKEN` - Токен, выданный BotFather.

3. Создайте новый чат в Telegram, добавьте бота, он его запомнит и будет присылать туда оповщенеия о новых инцидентах.
4. Чтобы получать уведомления только по определённым категориям, используйте команду `/categ` в чате.
5. Вы также можете управлять каналами через админ-панель Django в разделе Bot.

---

## Настройка Telethon-клиента

Для работы с Telegram-каналами через Telethon выполните следующие шаги:

1. Получите ключи API в [my.telegram.org/apps](https://my.telegram.org/apps).
2. Добавьте ключи в файл окружения `.env`:

```bash
TELEGRAM_API_ID=
TELEGRAM_API_HASH=
```

- `TELEGRAM_API_ID` — ваш API ID.
- `TELEGRAM_API_HASH` — ваш API Hash.

3. Выполните следующую Django-команду для авторизации в Telegram:

```bash
python manage.py init_telethon_client
```

4. После авторизации добавьте Telegram-источник через административную панель Django. Если это закрытый канал, отметьте соответствующую галочку `[v] закрытый телеграм-канал`.

> Примечание: Вы можете использовать Telethon как для работы с закрытыми каналами (требуется авторизация), так и для открытых.

---

## API моделей

Для вызова внешних моделей используется [Replicate.com](https://replicate.com/), что является более дешёвой альтернативой ChatGPT.

---

## REST API интерфейс

Сделан на базе `django-rest-api-framework` документация автоматически генерируется swagger и доступна по пути `/swagger-ui`

---

## Инфраструктура

Для работы проекта были созданы две удалённые машины для окружений `stage` и `prod`. 
Они настроены одинаково, сервер запускается так же, как и локально:

```
docker compose -f docker-compose.prod.yaml pull
docker-compose -f docker-compose.prod.yaml -d
```

Более подробный процесс разворачивания можно увидеть в [deploy.yml](.github/workflows/deploy.yml).

> [!NOTE] На заметку
> Рабочая директория на серверах, где расположена запущенная версия сервера: `/opt/services/neuro-parser`. 
> Актуальная информация о месте запуска сервера находится в `$DEPLOY_LOCATION` в файле [deploy.yml](.github/workflows/deploy.yml).

> [!WARNING] Важно! 
> Рабочая директория `github-actions` (`/home/github-actions/_work/neuro-parser`) используется только для клонирования репозитория.
> В ней не запускается и не должен запускаться проект.

### Типовые операции на серверах

- **На окружении (`stage` или `prod`) какая-то ошибка, нужно почитать логи**
  
  ```bash
  # почитать логи с конкретного контейнера
  # web - сервер (админка), bot - TG-бот, celery - задачи в очередях
  docker logs neuro-parser-web-1
  # или
  cd /opt/services/neuro-parser
  docker-compose -f docker-compose.prod.yml logs -f
  ```

- **Нужно протестировать скрипт внутри контейнера**
  
  ```bash
  # web - сервер (админка), bot - TG-бот, celery - задачи в очередях
  docker exec -it neuro-parser-web-1 bash
  # или
  cd /opt/services/neuro-parser
  docker-compose -f docker-compose.prod.yml exec -it web bash
  ```

- **Закончилось место. Сервер спамит ошибками `No space left on disk`.**

  Скорее всего, место закончилось из-за постоянной сборки или скачивания образов. Они должны чиститься периодически, однако в редких случаях этого может быть недостаточно. Можно попробовать почистить место вручную:

  ```bash
  docker container prune -f
  docker image prune -af
  # проверить место на диске
  df -h
  ```

---

## Внесение вклада

Мы приветствуем участие сообщества. Пожалуйста, следуйте инструкциям в файле [CONTRIBUTING.md](CONTRIBUTING.md).

---

## Контакты

Если у вас есть вопросы или требуется помощь, свяжитесь с нами по адресу info@antijob.net.

---


# Development Guide

This document provides guidelines for developers contributing to the project, covering Python package management, running the project locally or in production, setting up a Telegram bot, broadcasting messages, and API usage.

## Table of Contents
1. [Managing Python Packages](#managing-python-packages)
1. [Running Locally](#running-locally)
1. [Running in Production](#running-in-production)
1. [Telegram Bot Setup](#telegram-bot-setup)
1. [Telethon Client Setup](#telethon-client-setup)
1. [Model API](#model-api)
1. [REST API Interface](#rest-api-interface)
1. [Infrastructure](#infrastructure)
1. [Contributing](#contributing)
1. [Contact](#contact)

---

## Managing Python Packages

For managing Python packages, we use [PDM](https://pdm-project.org/):

```bash
# install all locked packages from lock file
pdm install

# resolve all dependencies and lock packages to lock file
pdm lock

# update all packages
pdm update

# add new package to pyproject.toml without creating venv
pdm add --no-sync <package_name>
```

Both `pyproject.toml` and `pdm.lock` files should be included in git.

---

## Running Locally

1. Create an `.env` file from `.env.template` and initialize the database.
2. Run the following command inside the root directory to start the local container:

```bash
docker-compose up -d
```

3. Add the following lines to your `/etc/hosts` file to resolve local domains for Traefik:

```bash
127.0.0.1 report.local
127.0.0.1 flower-report.local
```

4. Access the admin panel at `http://report.local/s/ecret/admin` or use the API at `http://report.local/api`.

5. For the system to work fully, add links to sources and incident types for tracking.

---

## Running in Production

1. Modify the `config/.env` file and create the database.
2. Run the following command inside the root directory to start the production container:

```bash
docker-compose -f docker-compose.prod.yaml up -d
```

---

## Telegram Bot Setup

You can use the Telegram bot to receive notifications about new incidents.

### Setup

1. Register a new bot with [BotFather](https://t.me/BotFather).
2. Add the following settings to the `.env` file:

```bash
TELEGRAM_BOT_TOKEN=
```

- `TELEGRAM_BOT_TOKEN` - The token provided by BotFather.

3. Create a new Telegram chat, add the bot, and it will remember the group for notifications.
4. To receive notifications for specific categories, use the `/categ` command in the chat.
5. You can also manage channels via the Django admin panel under the Bot section.

---

### Telethon Client Setup

The Telethon client is used to interact with the Telegram API. Follow these steps to configure it:

1. Obtain **API ID** and **API Hash**:
   - Visit [my.telegram.org/apps](https://my.telegram.org/apps).
   - Register an application and obtain the keys.
2. Add the following to your `.env` file:
   ```plaintext
   TELEGRAM_API_ID=<your API ID>
   TELEGRAM_API_HASH=<your API Hash>
   ```
3. Run the Django command to log in:
   ```bash
   python manage.py init_telethon_client
   ```
4. After authentication, add a Telegram source in the admin panel and check whether it’s a private channel. Sources can be either public or private.

---

## Model API

For external model API calls, we use [Replicate.com](https://replicate.com/) as a cost-effective alternative to ChatGPT.

---

## REST API Interface

The REST API is built using the `django-rest-framework`. Documentation is automatically generated using Swagger and is available at `/swagger-ui`.

---

## Infrastructure

For project to be online, we've setup two remote machines for environments `stage` и `prod`.
They have identical configurations, and the project is started in the similar way as you would run it locally:

```
docker compose -f docker-compose.prod.yaml pull
docker-compose -f docker-compose.prod.yaml -d
```

More deployment details in [deploy.yml](.github/workflows/deploy.yml).

> [!NOTE]
> Working directory for the project is `/opt/services/neuro-parser`. 
> Should the value change, you can look it up in `$DEPLOY_LOCATION` at [deploy.yml](.github/workflows/deploy.yml).

> [!WARNING] Beware!
> Working directory of `github-actions` (`/home/github-actions/_work/neuro-parser`) is only used to clone project's source code.
> It's not used for running the project and shouldn't be used by anyone to do so.

### Типовые операции на серверах

- **An error has occured in the environment, so we need to look at logs**
  
  ```bash
  # a particular container
  # web - server (admin section), bot - TG-bot, celery - tasks in queues
  docker logs neuro-parser-web-1
  # or
  cd /opt/services/neuro-parser
  docker-compose -f docker-compose.prod.yml logs -f
  ```

- **Need to test a script inside the container**
  
  ```bash
  # web - server (admin section), bot - TG-bot, celery - tasks in queues
  docker exec -it neuro-parser-web-1 bash
  # or
  cd /opt/services/neuro-parser
  docker-compose -f docker-compose.prod.yml exec -it web bash
  ```

- **No space left. Server spams with `No space left on device` messages.**

  Most likely the space finished due to frequent rebuilds or image pulls. We periodically clean up the space from unused images and containers, but it might not be sufficient sometimes. You can do that manually:

  ```bash
  docker container prune -f
  docker image prune -af
  # check disk usage
  df -h
  ```

---

## Contributing

We welcome contributions from the community. Please follow the guidelines in the [CONTRIBUTING.md](CONTRIBUTING.md) file.

---

## Contact

If you have any questions or need further assistance, feel free to contact us at info@antijob.net.