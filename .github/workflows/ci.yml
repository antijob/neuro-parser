name: CI

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      runType:
        description: "How to run this build?"
        required: true
        default: "default"
        type: choice
        options:
          - Force build
          - Default

jobs:
  clean:
    name: Clean images
    runs-on: ["self-hosted", "antijob-report", "production"]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Clean unused images and network
        run: |
          docker image prune -f


  build:
    name: Build production
    needs:
      - clean
    runs-on: ["self-hosted", "antijob-report", "production"]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # Build these images only when related files are changed
      - name: Filter out app changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            web:
              - 'server/**'
              - 'Dockerfile.prod'
              - 'Dockerfile'
              - '*.py'
              - 'requirements.txt'

      - name: Prepare .env
        if: ${{ steps.filter.outputs.web == 'true' || github.event.inputs.runType == 'Force build' }}
        run: |
          cp .env.template .env
          sed -i \
            -e s,^POSTGRES_USER=.*,POSTGRES_USER=$POSTGRES_USER, \
            -e s,^POSTGRES_PASSWORD=.*,POSTGRES_PASSWORD=$POSTGRES_PASSWORD, \
            -e s,^SENTRY_DSN=.*,SENTRY_DSN=$SENTRY_DSN, \
            -e s,^TELEGRAM_BOT_TOKEN=.*,TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN, \
            -e s,^DJANGO_KEY=.*,DJANGO_KEY=$DJANGO_KEY, \
            -e s,^CF_DNS_API_TOKEN=.*,CF_DNS_API_TOKEN=$CF_DNS_API_TOKEN, \
            -e s,^API_TOKEN=.*,API_TOKEN=$API_TOKEN, \
            -e s,^CHAT_GPT_KEY=.*,CHAT_GPT_KEY=$CHAT_GPT_KEY, \
            -e s,^FLOWER_USER=.*,FLOWER_USER=$FLOWER_USER, \
            -e s,^FLOWER_PASSWORD=.*,FLOWER_PASSWORD=$FLOWER_PASSWORD, \
            .env
        env:
          POSTGRES_USER: "${{ secrets.POSTGRES_USER }}"
          POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
          SENTRY_DSN: "${{ secrets.SENTRY_DSN }}"
          TELEGRAM_BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          DJANGO_KEY: "${{ secrets.DJANGO_KEY}}"
          CF_DNS_API_TOKEN: "${{ secrets.CF_DNS_API_TOKEN }}"
          API_TOKEN: "${{ secrets.API_TOKEN }}"
          CHAT_GPT_KEY: "${{ secrets.CHAT_GPT_KEY }}"
          FLOWER_USER: "${{ secrets.FLOWER_USER }}"
          FLOWER_PASSWORD: "${{ secrets.FLOWER_PASSWORD }}"

      - name: Build python
        if: ${{ steps.filter.outputs.web == 'true' || github.event.inputs.runType == 'Force build' }}
        run: |
          NEURO_PARSER_VERSION=${GITHUB_REF#refs/heads/} \
            docker-compose -f docker-compose.prod.yaml build web

      - name: login to docker registry
        if: ${{ steps.filter.outputs.web == 'true' || github.event.inputs.runtype == 'force build' }}
        run: echo "${{ secrets.docker_password }}" | docker login -u ${{ secrets.docker_username }} --password-stdin

      - name: push to registry
        if: ${{ steps.filter.outputs.web == 'true' || github.event.inputs.runtype == 'force build' }}
        run: |
          neuro_parser_version=${github_ref#refs/heads/} \
            docker-compose -f docker-compose.prod.yaml push web

      - name: logout from docker registry
        if: ${{ steps.filter.outputs.web == 'true' || github.event.inputs.runtype == 'force build' }}
        run: docker logout


  start_staging:
    name: Start staging
    needs:
      - build
    runs-on: ["self-hosted", "antijob-report", "staging"]
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: login to docker registry
        run: echo "${{ secrets.docker_password }}" | docker login -u ${{ secrets.docker_username }} --password-stdin

      - name: Start the app
        run: |
          docker-compose -f docker-compose.prod.yaml pull
          docker-compose -f docker-compose.prod.yaml up -d
          docker-compose -f docker-compose.prod.yaml exec -T web python manage.py migrate
          docker-compose -f docker-compose.prod.yaml exec -T web python manage.py collectstatic --noinput

      - name: logout from docker registry
        if: ${{ always() }}
        run: docker logout


  start_production:
    name: Start production
    needs:
      - build
    runs-on: ["self-hosted", "antijob-report", "production"]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: login to docker registry
        run: echo "${{ secrets.docker_password }}" | docker login -u ${{ secrets.docker_username }} --password-stdin

      - name: Start the app
        run: |
          docker-compose -f docker-compose.prod.yaml pull
          docker-compose -f docker-compose.prod.yaml up -d
          docker-compose -f docker-compose.prod.yaml exec -T web python manage.py migrate
          docker-compose -f docker-compose.prod.yaml exec -T web python manage.py collectstatic --noinput

      - name: logout from docker registry
        if: ${{ always() }}
        run: docker logout
