name: CI

on:
  push:
    branches:
      - main

jobs:
  check-secrets:
    name: Check for exposed secrets
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - run: |
          docker run --rm --name=deepfence-secretscanner \
            -v $(pwd):/deepfence/mnt \
            deepfenceio/deepfence_secret_scanner:latest \
            --host-mount-path /deepfence/mnt --local /deepfence/mnt

  build:
    name: Build production
    runs-on: ["self-hosted", "antijob-report", "production"]
    if: github.ref == 'refs/heads/main'
    needs:
      - check-secrets
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # Build these images only when related files are changed
      - name: Filter out app changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            traefik:
              - 'traefik/**'
              - traefik.*.toml
              - 'Dockerfile.traefik'
            web:
              - 'server/**'
              - 'Dockerfile.prod'
              - 'Dockerfile'
              - '*.py'
              - 'requirements.txt'

      - name: Prepare .env
        run: |
          cp .env.template .env
          sed -i \
            -e s,^POSTGRES_USER=.*,POSTGRES_USER=$POSTGRES_USER, \
            -e s,^POSTGRES_PASSWORD=.*,POSTGRES_PASSWORD=$POSTGRES_PASSWORD, \
            -e s,^SENTRY_DSN=.*,SENTRY_DSN=$SENTRY_DSN, \
            -e s,^TELEGRAM_BOT_TOKEN=.*,TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN, \
            -e s,^DJANGO_KEY=.*,DJANGO_KEY=$DJANGO_KEY, \
            -e s,^CF_DNS_API_TOKEN=.*,CF_DNS_API_TOKEN=$CF_DNS_API_TOKEN, \
            .env
        env:
          POSTGRES_USER: "${{ secrets.POSTGRES_USER }}"
          POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
          SENTRY_DSN: "${{ secrets.SENTRY_DSN }}"
          TELEGRAM_BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          DJANGO_KEY: "${{ secrets.DJANGO_KEY}}"
          CF_DNS_API_TOKEN: "${{ secrets.CF_DNS_API_TOKEN }}"

      - name: Build traefik
        if: steps.filter.outputs.traefik == 'true'
        run: docker-compose -f docker-compose.prod.yaml build traefik

      - name: Build python
        if: steps.filter.outputs.web == 'true'
        run: docker-compose -f docker-compose.prod.yaml build web celery

  start:
    name: Start production
    needs:
      - build
    runs-on: ["self-hosted", "antijob-report", "production"]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Approve deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Vldln,person63846
          minimum-approvals: 1

      - name: Start the app
        run: |
          docker-compose -f docker-compose.prod.yaml up -d
          docker-compose -f docker-compose.prod.yaml exec -T web python manage.py migrate
          docker-compose -f docker-compose.prod.yaml exec -T web python manage.py collectstatic
