services:
  traefik:
    image: "traefik:2.10"
    command:
      - "--accessLog=true"
      - "--api.dashboard=false"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesResolvers.letsencrypt.acme.storage=/certificates/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=DEBUG"
      - "--providers.docker.exposedByDefault=false"
    container_name: "traefik"
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-public-certificates:/certificates"
    labels:
      traefik.enable: "true"
      traefik.http.routers.dashboard.rule: "Host(`${TRAEFIK_HOST}`)"
      traefik.http.routers.dashboard.tls: "true"
      traefik.http.routers.dashboard.tls.certresolver: "letsencrypt"
      traefik.http.routers.dashboard.service: "api@internal"
      traefik.http.routers.dashboard.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: "testuser:$$apr1$$jIKW.bdS$$eKXe4Lxjgy/rH65wP1iQe1"
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    networks:
      - djangonetwork

  db:
    extends:
      file: docker-compose.yaml
      service: db
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data

  web:
    extends:
      file: docker-compose.yaml
      service: web
    command: /bin/bash -c ./docker/web/entrypoint-prod.sh
    environment:
      DEBUG: "False"
    volumes:
      - /root/models:/code/models
      - "staticfiles-data:/code/public/static"
    labels:
      traefik.enable: "true"
      traefik.http.routers.django.rule: "Host(`${HOST}`)"
      traefik.http.routers.django.entrypoints: "websecure"
      traefik.http.routers.django.tls: "true"
      traefik.http.routers.django.tls.certresolver: "letsencrypt"
    
  celery:
    extends:
      file: docker-compose.yaml
      service: celery
    volumes:
      - ${MODELS_ROOT}:/code/models

  bot:
    extends:
      file: docker-compose.yaml
      service: bot
    volumes: []

  flower:
    extends:
      file: docker-compose.yaml
      service: flower
    labels:
      traefik.enable: "true"
      traefik.http.routers.flower.rule: "Host(`${FLOWER_HOST}`)"
      traefik.http.routers.flower.entrypoints: "websecure"
      traefik.http.routers.flower.tls: "true"
      traefik.http.routers.flower.tls.certresolver: "letsencrypt"

  redis:
    extends:
      file: docker-compose.yaml
      service: redis

  nginx:
    image: nginx:1.23
    restart: unless-stopped
    volumes:
      - staticfiles-data:/usr/share/nginx/html/static:ro
    depends_on:
      - web
    networks:
      - djangonetwork
    labels:
      traefik.enable: "true"
      traefik.http.routers.staticfiles.rule: "Host(`${HOST}`) && PathPrefix(`/static/`)"
      traefik.http.routers.staticfiles.entrypoints: "websecure"
      traefik.http.routers.staticfiles.tls: "true"
      traefik.http.routers.staticfiles.tls.certresolver: "letsencrypt"

volumes:
  staticfiles-data:
  postgres_data_prod:
  traefik-public-certificates:

networks:
  djangonetwork:
    driver: bridge
