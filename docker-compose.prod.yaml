version: "3.11"

services:
  traefik:
    image: traefik:latest
    command:
      - "--accessLog=true"
      - "--api.dashboard=false"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.letsencrypt.acme.email=info@antijob.net"
      - "--certificatesResolvers.letsencrypt.acme.storage=/certificates/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=DEBUG"
      - "--providers.docker.exposedByDefault=false"
    container_name: "traefik"
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-public-certificates:/certificates"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=testuser:$$apr1$$jIKW.bdS$$eKXe4Lxjgy/rH65wP1iQe1"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    networks:
      - djangonetwork

  db:
    image: postgres:13.4-alpine
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - djangonetwork
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=md5
    env_file:
      - .env

  nginx:
    image: nginx:1.23-alpine
    restart: unless-stopped
    volumes:
      - type: volume
        source: staticfiles-data
        target: /usr/share/nginx/html/static
        read_only: true
        volume:
          nocopy: true
    depends_on:
      - web
    networks:
      - djangonetwork
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.staticfiles.rule=Host(`${HOST}`) && PathPrefix(`/static/`)"
      - "traefik.http.routers.staticfiles.entrypoints=websecure"
      - "traefik.http.routers.staticfiles.tls=true"
      - "traefik.http.routers.staticfiles.tls.certresolver=letsencrypt"

  celery:
    build: .
    command: /bin/bash -c "chmod +x ./celery-start.sh && ./celery-start.sh"
    volumes:
      - .:/code
    restart: always
    depends_on:
      - redis
    networks:
      - djangonetwork

  flower:
    image: mher/flower
    container_name: flower
    command: celery flower --url_prefix='/flower'
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - 5555:5555
    networks:
      - djangonetwork
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`${HOST}`) && PathPrefix(`/flower`)"
      - "traefik.http.routers.flower.middlewares=stripprefix"
      - "traefik.http.middlewares.stripprefix.stripprefix.prefixes=/flower"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls=true"
      - "traefik.http.routers.flower.tls.certresolver=letsencrypt"
    depends_on:
      - redis
      - web

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: /bin/bash -c "chmod +x ./entrypoint-prod.sh && ./entrypoint-prod.sh"
    volumes:
      - /root/models:/home/github-actions/code/models
      - "staticfiles-data:/code/static"
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - DEBUG=True
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_ALLOWED_HOSTS=${HOST}
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${HOST}`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      - "traefik.http.routers.django.tls=true"
      - "traefik.http.routers.django.tls.certresolver=letsencrypt"
    networks:
      - djangonetwork
  redis:
    image: redis:alpine
    expose:
      - "6379"
    networks:
      - djangonetwork

volumes:
  postgres_data_prod:
  traefik-public-certificates:
  staticfiles-data:
networks:
  djangonetwork:
    driver: bridge
