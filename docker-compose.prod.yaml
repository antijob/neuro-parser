services:
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-public-certificates:/certificates"
      - "$PWD/traefik.toml:/etc/traefik/traefik.toml"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${HOST}`)"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.web.service=api@internal"
    networks:
      - djangonetwork
  db:
    image: postgres:13.4-alpine
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=md5
    env_file:
      - .env
    networks:
      - djangonetwork
  web:
    build: .
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; gunicorn server.wsgi'
    volumes:
      - .:/code
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - DEBUG=False
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_ALLOWED_HOSTS=${HOST}
    depends_on:
      - db
    networks:
      - djangonetwork
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${HOST}`)"
      - "traefik.http.routers.django.tls=true"
      - "traefik.http.routers.django.tls.certresolver=letsencrypt"
  redis:
    image: redis:alpine
    expose:
      - "6379"
    networks:
      - djangonetwork
  celery:
    build: .
    command: celery -A server worker --loglevel=info
    restart: always
    depends_on:
      - redis
    networks:
      - djangonetwork
networks:
  djangonetwork:
    driver: bridge

volumes:
  postgres_data_prod:
  traefik-public-certificates:
