services:
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    ports:
      - 8008:80
      - 8081:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.dev.toml:/traefik.toml:ro"
      - .:/code
    networks:
      - djangonetwork

  db:
    image: postgres:13.4-alpine
    volumes:
      - ~/.parser/data/db:/var/lib/postgresql/data
      - .:/code
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=md5
    env_file:
      - .env
    networks:
      - djangonetwork

  web:
    build: .
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; python manage.py runserver 0.0.0.0:8000'
    volumes:
      - ./models:/code/models
      - .:/code
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    networks:
      - djangonetwork
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${HOST}`)"

  redis:
    image: redis:alpine
    expose:
      - "6379"
    networks:
      - djangonetwork

  celery:
    build: .
    command: celery -A server worker --loglevel=info
    volumes:
      - .:/code
    restart: always
    depends_on:
      - redis
    networks:
      - djangonetwork

networks:
  djangonetwork:
    driver: bridge
